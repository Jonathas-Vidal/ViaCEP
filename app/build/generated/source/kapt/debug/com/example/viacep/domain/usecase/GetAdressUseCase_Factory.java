// Generated by Dagger (https://dagger.dev).
package com.example.viacep.domain.usecase;

import com.example.viacep.data.repository.AdressRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetAdressUseCase_Factory implements Factory<GetAdressUseCase> {
  private final Provider<AdressRepository> repositoryProvider;

  public GetAdressUseCase_Factory(Provider<AdressRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetAdressUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static GetAdressUseCase_Factory create(Provider<AdressRepository> repositoryProvider) {
    return new GetAdressUseCase_Factory(repositoryProvider);
  }

  public static GetAdressUseCase newInstance(AdressRepository repository) {
    return new GetAdressUseCase(repository);
  }
}
